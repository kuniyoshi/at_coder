{
	// Place your at_coder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Write to stderr": {
		"scope": "rust",
		"prefix": "warn",
		"body": [
			"eprintln!(\"{:?}\", $1);$0",
		],
		"description": "write to stderr"
	},
	"Write to stdout": {
		"scope": "rust",
		"prefix": "say",
		"body": [
			"println!(\"{}\", $1);$0",
		],
		"description": "write to stdout"
	},
	"Vector vector type": {
		"scope": "rust",
		"prefix": "vv",
		"body": [
			"Vec<Vec<$1>>$0",
		],
		"description": "vector vector type"
	},
	"Vector usize type": {
		"scope": "rust",
		"prefix": "vu",
		"body": [
			"Vec<usize>$0",
		],
		"description": "vector usize type"
	},
	"Vector char type": {
		"scope": "rust",
		"prefix": "vc",
		"body": [
			"Vec<char>$0",
		],
		"description": "vector char type"
	},
	"Vector type": {
		"scope": "rust",
		"prefix": "vt",
		"body": [
			"Vec<$1>$0",
		],
		"description": "vector type"
	},
	"Vector anonymouse": {
		"scope": "rust",
		"prefix": "va",
		"body": [
			"Vec<_>",
		],
		"description": "vector anonymouse"
	},
	"Vector new": {
		"scope": "rust",
		"prefix": "vn",
		"body": [
			"Vec::new()$0",
		],
		"description": "vector new"
	},
	"Option type": {
		"scope": "rust",
		"prefix": "ot",
		"body": [
			"Option<$1>$0",
		],
		"description": "option type"
	},
	"Tupple declaratoin": {
		"scope": "rust",
		"prefix": "td",
		"body": [
			"($1, $2)$0",
		],
		"description": "tuple declaratoin"
	},
	"usize tupple declaratoin": {
		"scope": "rust",
		"prefix": "tu",
		"body": [
			"(usize, usize)$0",
		],
		"description": "usize tuple declaratoin"
	},
	"unwrap": {
		"scope": "rust",
		"prefix": "uw",
		"body": [
			"unwrap()"
		],
		"description": "unwrap"
	},
	"anonymous parts": {
		"scope": "rust",
		"prefix": "bar",
		"body": [
			"|$1|$0"
		],
		"description": "anonymous parts"
	},
	"use std::io::{self, BufRead}": {
		"scope": "rust",
		"prefix": "usio",
		"body": [
			"use std::io::{self, BufRead};"
		],
		"description": "use std::io::{self, BufRead}"
	},
	"fn main() {}": {
		"scope": "rust",
		"prefix": "fnm",
		"body": [
			"fn main() {",
			"    $0",
			"}"
		],
		"description": "fn main() {}"
	},
	"lines": {
		"scope": "rust",
		"prefix": "lis",
		"body": [
			"let mut lines = io::stdin().lock().lines();"
		],
		"description": "lines"
	},
	"read sn": {
		"scope": "rust",
		"prefix": "readsn",
		"body": [
			"let n: usize = lines.next().unwrap().unwrap().parse().unwrap();"
		],
		"description": "read single n",
	},
	"read nm": {
		"scope": "rust",
		"prefix": "readnm",
		"body": [
			"let (n, m): (usize, usize) = {",
			"    let list: Vec<usize> = lines.next().unwrap().unwrap().split_whitespace().map(|s| s.parse().unwrap()).collect();",
			"    (list[0], list[1])"
			"};"
		],
		"description": "read nm",
	},
	"read list": {
		"scope": "rust",
		"prefix": "readlist",
		"body": [
			"let a: Vec<usize> = lines.next().unwrap().unwrap().split_whitespace().map(|s| s.parse().unwrap()).collect();"
		],
		"description": "read list",
	},
	"read costed edges": {
		"scope": "rust",
		"prefix": "readcedges",
		"body": [
			"let edges: Vec<(usize, usize, usize)> = (0..m).map(|_| {",
			"    let list: Vec<usize> = lines.next().unwrap().unwrap().split_whitespace().map(|s| s.parse().unwrap()).collect();",
			"    (list[0] - 1, list[1] - 1, list[2])",
			"}).collect();"
		],
		"description": "read costed edges"
	}
}